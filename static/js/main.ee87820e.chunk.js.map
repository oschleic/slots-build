{"version":3,"sources":["components/Card.ts","components/Reel.ts","components/Deck.ts","components/SlotMachine.ts","components/Judge.ts","renderer/renderer.tsx","app.tsx","index.js"],"names":["Card","_PIXI$Sprite","_inherits","_super","_createSuper","texture","cardID","_this","_classCallCheck","call","id","anchor","set","_createClass","key","get","Math","pow","floor","this","num","value","suit","PIXI","shared","resources","height","Direction","Reel","_PIXI$Container","args","_cards","totalHeight","decks","rotationsRemanining","startY","_isSpinning","cooldown","direction","DOWN","cards","x","gapHeight","length","cardHeight","curPos","forEach","card","index","yPos","y","addChild","width","Deck","resetCount","randomCards","randomNumber","random","indexOf","push","count","createReels","slotMachine","grid","reels","i","reelLength","pokerHand","randomHand","reelCount","_loop","_i","column","map","row","totalWidth","xPos","reel","SlotMachine","isSpinning","config","items","_this2","setTimeout","resize","gapWidth","_this3","arguments","undefined","createNextReels","nextReels","revolutions","ticker","reelStart","add","animation","finishedEvent","CustomEvent","detail","outcome","window","dispatchEvent","readyEvent","remove","nextReel","thisReel","gsap","isTweening","to","duration","ease","removeChild","min","TOTAL_HANDS","handFrequencies","tableHands","pokerIndexes","probs","stand","getHandIndex","number","sum","cur","Judge","payoutRate","returnToPlayer","handMultiplier","handIndex","scalar","j","payTable","hand","multiplier","cs","ss","v","o","s","bet","getGrid","middleRow","evaluateHand","judge","getSizing","el","computedStyle","getComputedStyle","clientHeight","clientWidth","parseFloat","paddingTop","paddingBottom","paddingLeft","paddingRight","Renderer","gameView","useRef","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","setIsSpinning","console","log","_useState5","_useState6","balance","setBalance","balanceRef","current","_useState7","_useState8","_useState9","_useState10","win","setWin","_useState11","_useState12","app","setApp","appRef","_useState13","_useState14","setSlotMachine","slotMachineRef","_useState15","_useState16","showPayTable","setShowPayTable","useEffect","_getSizing","a","backgroundColor","autoStart","assets","concat","onComplete","load","onResize","_slotMachineRef$curre","_getSizing2","screen","renderer","onSpinFinished","e","w","decide","onSpinReady","addEventListener","removeEventListener","destroy","appendChild","view","stage","start","_jsxs","_Fragment","children","_jsx","className","Header","style","textAlign","Button","onClick","background","size","toFixed","ref","Footer","disabled","isSpinnable","spin","Modal","show","onHide","closeButton","Title","Body","p","App","_React$Component","apply","React","Component","ReactDOM","document","getElementById","render","BrowserRouter"],"mappings":"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","file":"static/js/main.ee87820e.chunk.js","sourcesContent":["import * as PIXI from 'pixi.js';\n\nexport type CardArgs = {\n  texture: PIXI.Texture,\n  x: number,\n  y: number,\n}\n\n\n\nexport default class Card extends PIXI.Sprite {\n  public readonly id: number;\n  constructor(texture: PIXI.Texture, cardID: number){\n    super(texture);\n    this.anchor.set(0.5, 0);\n    this.id = cardID;\n  }\n\n  static cardHeight(){\n    return PIXI.Loader.shared.resources[\"card_0\"].texture.height\n  }\n\n  //var J=11, Q=12, K=13, A=14, C=1, D=2, H=4, S=8;\n  get suit(): number{\n    return Math.pow(2, Math.floor(this.id / 13))\n  }\n  get value(): number{\n    let num = (this.id % 13) + 1;\n    if(num === 1) num = 14;\n    return num;\n  }\n\n\n\n\n  toString(){\n    const suits = ['♣', '♦', '♥', '♠']\n    const suit = Math.floor(this.id / 13)\n    \n    const number = (this.id % 13) + 1\n    return suits[suit]\n\n  }\n\n\n}","import * as PIXI from 'pixi.js';\nimport Card from './Card';\nimport Deck from './Deck';\nimport gsap from \"gsap\";\n\nenum Direction {\n    UP = -1,\n    DOWN = 1\n}\n\nexport type ReelArgs = {\n    cards: Card[],\n    height: number,\n    width: number,\n    x: number,\n    decks: Deck[]\n}\n\n\n//Throws events: spin start and spin end\nexport default class Reel extends PIXI.Container {\n    private _cards: Card[] = [];\n    private totalHeight: number;\n    private decks: Deck[];\n    private rotationsRemanining = 0;\n    private startY: number;\n    private _isSpinning = false;\n    private cooldown = 1000;\n    private direction: Direction = Direction.DOWN;\n\n    constructor(args: ReelArgs) {\n        super();\n        this._cards = args.cards;\n        this.x = args.x\n        this.totalHeight = args.height\n        this.decks = args.decks;\n        const freeHeight = this.totalHeight - (this.cards.length * Card.cardHeight());\n        const gapHeight = freeHeight / (this.cards.length - 1);\n        this.startY = gapHeight;\n        let curPos = 0;\n\n        this.cards.forEach((card, index) =>{\n            const yPos = gapHeight * (index)\n            card.y = curPos + yPos\n            curPos += Card.cardHeight();\n            this.addChild(card);\n        })\n    }\n\n\n    resize(width: number, height: number) {\n        this.totalHeight = height;\n        const freeHeight = this.totalHeight - (this.cards.length * Card.cardHeight());\n        const gapHeight = freeHeight / (this.cards.length - 1);\n        let curPos = 0;\n        this.cards.forEach((card, index) => {\n            const yPos = gapHeight * (index)\n            card.y = curPos + yPos\n            curPos += Card.cardHeight();\n        })\n    }\n\n    get cards() {\n        return this._cards;\n    }\n\n    get gapHeight() {\n        const freeHeight = this.totalHeight - (this.cards.length * Card.cardHeight());\n        const gapHeight = freeHeight / (this.cards.length - 1);\n        return gapHeight;\n    }\n\n    get isSpinning() {\n        return this._isSpinning;\n    }\n\n\n    /*\n    spin(speed = 10, count = 1, outcome = Deck.randomHand(this.cards.length)){\n        \n        if(this._isSpinning) return;\n        this._isSpinning = true;\n        const ticker = PIXI.Ticker.shared;\n        this.rotationsRemanining = count * this.cards.length;\n\n        const origins: number[] = [];\n        for(let i = 0; i < this.cards.length; i++){\n            origins.push(this.cards[i].y);\n            const deltaX = this.totalHeight - this.cards[i].y;\n            gsap.to(this.cards[i], {\n                y: this.totalHeight, duration: deltaX / 400, ease: \"none\"\n            });\n        }\n\n\n        const animation = () => {\n            for(let i = 0; i < this.cards.length; i++){\n                \n                if(this.rotationsRemanining > 0 && this.cards[i].y >= this.totalHeight) {\n                    this.rotationsRemanining -= 1;\n                    this.removeChild(this.cards[i])\n                    this.cards[i] = this.decks[i].randomCard();\n                    this.cards[i].y = -1 * (Math.ceil(this.gapHeight / speed) * speed);\n                    this.addChild(this.cards[i]);\n\n                    const deltaX = this.totalHeight - this.cards[i].y;\n\n                    if(this.rotationsRemanining < this.cards.length){\n                        gsap.to(this.cards[i], {\n                            y: origins[i], duration: (origins[i] - this.cards[i].y) / 400, ease: \"none\"\n                        });\n                    }\n                    else{\n                        gsap.to(this.cards[i], {\n                            y: this.totalHeight, duration: deltaX / 400, ease: \"none\"\n                        });\n                    }\n\nthis.config.height      console.log(this.cards[2].toString())\n                    setTimeout(() =>{\n                        this._isSpinning = false;\n                        // create custom events\n                        const finishedEvent = new CustomEvent(\"spinFinished\", {\n                            detail: {\n                            reel: this,\n                            },\n                        });\n                        window.dispatchEvent(finishedEvent);\n\n                        \n                        \n                    }, this.cooldown)\n                    ticker.remove(animation)\n                }\n\n\n\n            }\n        }\n        ticker.add(animation)\n        \n    }\n    */\n\n}\n\n","import Card from \"./Card\";\nimport * as PIXI from 'pixi.js';\n\n\nexport default class Deck {\n\n  private resetCount: number;\n  private randomCards: number[] = [];\n\n\n  constructor(resetCount: number){\n    this.resetCount = resetCount;\n  }\n\n\n  randomCard(): Card {\n    if(this.randomCards.length === this.resetCount){\n      this.randomCards = [];\n    }\n    let card = null;\n    while(card == null){\n      let randomNumber = Math.floor(Math.random() * 51);\n      if (this.randomCards.indexOf(randomNumber) === -1) {\n          this.randomCards.push(randomNumber)\n          const texture = PIXI.Loader.shared.resources[\"card_\" + randomNumber].texture\n          card = new Card(texture, randomNumber);\n      }\n    }\n    return card;\n  }\n\n  static randomHand(count: number): Card[] {\n    const randomCards = [];\n    const cards = [];\n    while (randomCards.length < count) {\n        let randomNumber = Math.floor(Math.random() * 51);\n        if (randomCards.indexOf(randomNumber) === -1) {\n            randomCards.push(randomNumber)\n            const texture = PIXI.Loader.shared.resources[\"card_\" + randomNumber].texture\n            cards.push(new Card(texture, randomNumber));\n        }\n    }\n    return cards;\n  }\n}\n","import * as PIXI from 'pixi.js';\nimport Reel from './Reel';\nimport Card from './Card';\nimport Deck from './Deck';\nimport gsap from \"gsap\";\n\nexport type SlotMachineConfig = {\n  reelLength: number, //rows (3)\n  reelCount: number, //columns (5)\n  height: number,\n  width: number,\n  cooldown: number,\n}\n\n\nconst HSTART = 10;\n\n//const spinSound = sound.add('spinSound', '/assets/sound/Click_G.wav');\n\n\nfunction createReels(slotMachine: SlotMachineConfig): Reel[]{\n  let grid: Card[][] = [];\n  let reels = [];\n\n  //Geneate a random poker hand for each row\n  for(let i = 0; i < slotMachine.reelLength; i++){\n    const pokerHand = Deck.randomHand(slotMachine.reelCount);\n    grid.push(pokerHand);\n  }\n  //Create reels with each column\n  for(let i = 0; i < slotMachine.reelCount; i++){\n    const column = grid.map(row => row[i]);\n    const totalWidth = slotMachine.width;\n    const gapWidth = totalWidth / (slotMachine.reelCount + 1)\n    const xPos = gapWidth * (i + 1)\n    const reel = new Reel({cards: column, height: slotMachine.height, width: totalWidth / slotMachine.reelCount, x: xPos, decks: []});\n    reels.push(reel)\n  }\n  return reels;\n}\n\nexport default class SlotMachine extends PIXI.Container {\n  private reels: Reel[] = [];\n  private isSpinning = false;\n  public readonly config: SlotMachineConfig;\n\n\n  gapWidth(totalWidth: number, items: PIXI.Sprite[]){\n    const freeSpace = totalWidth;\n    return freeSpace / (items.length + 1);\n  }\n\n  constructor(args: SlotMachineConfig){\n    super();\n    this.config = args;\n\n    this.reels = createReels(args);\n    this.reels.forEach(reel => {\n      this.addChild(reel);\n    })\n  }\n\n  resize(width: number, height: number) {\n    if(!this.isSpinning){\n      this.config.height = height;\n      this.config.width = width;\n      const gapWidth = width / (this.config.reelCount + 1)\n      this.reels.forEach((reel, i) => {\n        const xPos = gapWidth * (i + 1)\n        reel.resize(width / this.config.reelCount, height);\n        reel.x = xPos;\n      })\n    }\n    else{\n      setTimeout(() => {\n        this.resize(width, height);\n      }, 100);\n    }\n\n\n  }\n\n\n\n  isSpinnable(){\n    return !this.isSpinning;\n  }\n  spin(speed = 10, count = 10){\n    if(this.isSpinning) return;\n    this.isSpinning = true;\n\n\n    const createNextReels = () => {\n      let nextReels = createReels(this.config);\n      nextReels.forEach(reel => {\n        reel.y = -1 * (this.config.height + reel.gapHeight);\n        this.addChild(reel);\n      })\n      return nextReels;\n    };\n    let nextReels: Reel[][] = [];\n    let revolutions: number[] = [];\n    for(let i = 0; i < this.config.reelCount; i++){\n      revolutions.push(0);\n    }\n\n    for(let i = 0; i < count; i++){\n      nextReels.push(createNextReels());\n    }\n\n    const ticker = PIXI.Ticker.shared;\n\n\n    let reelCount = 1;\n    let reelStart = 0;\n    const animation = () => {\n\n      if(revolutions[revolutions.length - 1] >= count){\n        const finishedEvent = new CustomEvent(\"spinFinished\", {\n          detail: {\n            outcome: this.reels,\n          },\n        });\n        window.dispatchEvent(finishedEvent);\n        setTimeout(() => {\n            this.isSpinning = false;\n            const readyEvent = new CustomEvent(\"spinReady\", {\n              detail: {\n                outcome: this.reels,\n              },\n            });\n          window.dispatchEvent(readyEvent);\n\n        }, this.config.cooldown)\n        ticker.remove(animation);\n        \n      }\n\n      for(let i = reelStart; i < reelCount; i++){\n        if(revolutions[i] >= count) {\n          reelStart++;\n          continue;\n        }\n\n\n        const nextReel = nextReels[revolutions[i]][i];\n        const thisReel = this.reels[i];\n\n        if(!gsap.isTweening(nextReel)){\n          if(revolutions[i] === count - 1){\n            gsap.to(nextReel, {\n              y: 0, duration: ((this.config.height + nextReel.gapHeight)) / 4000, ease: \"none\"\n            });\n          }\n          else{\n            gsap.to(nextReel, {\n              y: this.config.height + nextReel.gapHeight, duration: ((this.config.height + nextReel.gapHeight) * 2) / 4000, ease: \"none\"\n            });\n          }\n        }\n\n        if(!gsap.isTweening(thisReel)){\n          gsap.to(thisReel, {\n            y: this.config.height + thisReel.gapHeight, duration: (this.config.height + thisReel.gapHeight) / 4000, ease: \"none\"\n          });\n        }\n        if(thisReel.y >= this.config.height){\n          this.removeChild(thisReel);\n          this.reels[i] = nextReel;\n          revolutions[i] = revolutions[i] + 1;\n          reelCount = Math.min(reelCount + 1, this.config.reelCount);\n        }\n\n\n\n      }\n\n\n    }\n\n    ticker.add(animation);\n  }\n\n}","import Reel from \"./Reel\";\nimport Card from \"./Card\";\n\n\nconst TOTAL_HANDS = 2598960;\nconst handFrequencies = [\n  1302540, //Nothing\n  1098240, //1-pair\n  123552, //2-pair\n  54912, //3 of a kind\n  10200, //Straight (excluding royal flush and straight flush)\n  5108, //Flush (excluding royal flush and straight flush)\n  3744,\t//Full house\n  624, //Four of a kind\n  36, //Straight flush (excluding royal flush)\n  4 //Royal flush\n]\nconst tableHands = [\"High Card\", \"1 Pair\", \"2 Pair\", \"3 of a Kind\", \"Straight\", \"Flush\", \"Full House\", \"4 of a Kind\", \"Straight Flush\", \"Royal Flush\"];\n\nconst pokerHands = [\"4 of a Kind\", \"Straight Flush\",\"Straight\",\"Flush\",\"High Card\",\"1 Pair\",\"2 Pair\",\"Royal Flush\", \"3 of a Kind\",\"Full House\"];\nconst pokerIndexes = [7, 8, 4, 5, 0, 1, 2, 9, 3, 6]\n\nlet probs = [0];\nfor(let i = 1; i < handFrequencies.length; i++){\n  const probability = (handFrequencies[i])  / (TOTAL_HANDS); //The probability of the given hand\n  const stand = 100 / (100* probability)\n  probs.push(stand)\n}\n\nfunction getHandIndex(number: number){\n    let sum = handFrequencies[0];\n    let cur = 0;\n    while(sum < number){\n      cur++;\n      sum += handFrequencies[cur];\n    }\n    return cur;\n}\n\n\nexport default class Judge {\n    private returnToPlayer: number;\n    private handMultiplier: number[] = []; //The multiper to payout for a given hand\n\n    constructor(payoutRate: number) {\n        this.returnToPlayer = payoutRate;\n\n        let sum = 0;\n        for(let i = 0; i < TOTAL_HANDS; i++){\n        const handIndex = getHandIndex(i);\n            sum += probs[handIndex]\n        }\n        const scalar = TOTAL_HANDS * this.returnToPlayer / sum;\n        for(let i = 0; i < probs.length; i++){\n            this.handMultiplier.push(probs[i] * scalar);\n        }\n\n    }\n\n    getGrid(reels: Reel[]): Card[][]{\n        const cards: Card[][] = [];\n        // given an array of verical reels, return a grid of cards\n        for(let i = 0; i < reels[0].cards.length; i++){\n            const row: Card[] = [];\n            for(let j = 0; j < reels.length; j++){\n                row.push(reels[j].cards[i]);\n            }\n            cards.push(row);\n        }\n        return cards;\n    }\n\n    get payTable(){\n        const payTable = [];\n        for(let i = 0; i < tableHands.length; i++){\n            payTable.push({\n                hand: tableHands[i],\n                multiplier: this.handMultiplier[i]\n            })\n        }\n        return payTable;\n    }\n\n\n\n    //https://www.codeproject.com/Articles/569271/A-Poker-hand-analyzer-in-JavaScript-using-bit-math\n    evaluateHand(cs: number[], ss: number[]) {\n        var v,i,o,s = 1 << cs[0] | 1 << cs[1] | 1 << cs[2] | 1 << cs[3] | 1 << cs[4];\n        for (i = -1, v = o = 0; i < 5; i++, o = Math.pow(2, cs[i] * 4)) {v += o * ((v / o & 15) + 1);}\n        v = v % 15 - ((s / (s & -s) == 31) || (s == 0x403c) ? 3 : 1);\n        v -= ((ss[0] == (ss[1] | ss[2] | ss[3] | ss[4])) ? 1: 0) * ((s == 0x7c00) ? -5 : 1);\n        return pokerIndexes[v];\n    }\n\n    decide(bet: number, reels: Reel[]): number{\n        const grid = this.getGrid(reels);\n        const middleRow = grid[Math.floor(grid.length / 2)];\n        const suit = middleRow.map(card => card.suit);\n        const value = middleRow.map(card => card.value);\n        const handIndex = this.evaluateHand(value, suit);\n        const payout = this.handMultiplier[handIndex] * bet;\n        return payout;\n    }\n}","import * as PIXI from 'pixi.js';\nimport {useRef, useEffect, useState} from \"react\";\nimport { Loader, LoaderResource } from 'pixi.js';\nimport SlotMachine from '../components/SlotMachine';\nimport { Card, Button, Modal } from 'react-bootstrap'\nimport Judge from '../components/Judge';\nimport React from 'react';\n\nconst judge = new Judge(0.8);\n\nfunction getSizing(el: HTMLDivElement|null){\n  if(el == null) return {height: 0, width: 0};\n  const computedStyle = getComputedStyle(el);\n  let height = el.clientHeight;  // height with padding\n  let width = el.clientWidth;   // width with padding\n\n  height -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);\n  width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n  return {height, width};\n}\n\nexport function Renderer() {\n  const gameView = useRef<HTMLDivElement>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n  console.log(\"HERE\")\n  const [balance, setBalance] = useState<number>(1000);\n  const balanceRef= useRef(1000);\n  balanceRef.current = balance;\n  const [bet, setBet] = useState<number>(10);\n  const betRef = useRef(10);\n  betRef.current = bet;\n  const [win, setWin] = useState<number>(0);\n  const winRef = useRef(0);\n  winRef.current = win;\n\n  const [app, setApp] = useState<PIXI.Application| null>()\n  const appRef= useRef(app);\n  appRef.current = app;\n  const [slotMachine, setSlotMachine] = useState<SlotMachine | null>(null);\n  const slotMachineRef= useRef(slotMachine);\n  slotMachineRef.current = slotMachine;\n  \n\n  const [showPayTable, setShowPayTable] = useState(false);\n  const handleClose = () => setShowPayTable(false);\n  const handleShow = () => setShowPayTable(true);\n\n\n\n\n  useEffect(() => {\n  console.log(\"Mounted\")\n    if(gameView.current != null){\n      const {height,width} = getSizing(gameView.current);\n\n      const a = new PIXI.Application({\n        height: height,\n        width: width,\n        backgroundColor: 0x00AA54,\n        autoStart: true,\n      })\n      setApp(a);\n\n\n      let assets = [\"clover\", \"diamond\", \"heart\", \"spade\"];\n      for(let i = 0; i < assets.length; i++) {\n        for(let j = 1; j <= 13; j++){\n          PIXI.Loader.shared.add(`card_${(i * 13) + j - 1}`, `/assets/${assets[i]}/card_${j}_${assets[i]}.png`);\n        }\n      }\n\n      PIXI.Loader.shared.onComplete.add(() => setIsLoading(false));\n      PIXI.Loader.shared.load(() => {});\n    }\n\n    const onResize = () => {\n      const {height, width} = getSizing(gameView.current);\n      if(appRef.current != null && (height != appRef.current.screen.height || width != appRef.current.screen.width)){\n        appRef.current.renderer.resize(width, height);\n        slotMachineRef.current?.resize(width, height);\n      }\n    }\n  \n    const onSpinFinished = (e: CustomEventInit) => {\n      const w = judge.decide(bet, e.detail.outcome);\n      setWin(w);\n      setBalance(balanceRef.current + w);\n    }\n  \n    const onSpinReady = (e: CustomEventInit) => {\n      setIsSpinning(false);\n    }\n  \n\n    window.addEventListener(\"spinFinished\", onSpinFinished);\n    window.addEventListener(\"spinReady\", onSpinReady);\n    window.addEventListener(\"resize\", onResize);\n\n    \n    return () => {\n      window.removeEventListener(\"spinFinished\", onSpinFinished);\n      window.removeEventListener(\"spinReady\", onSpinReady);\n      window.removeEventListener(\"resize\", onResize);\n      app?.destroy(true);\n    };\n  }, []);\n\n  useEffect(() => {\n    if(gameView.current != null && app != null){\n      gameView.current.appendChild(app.view);\n      const slotMachine = new SlotMachine({\n        reelLength: 5,\n        reelCount: 5,\n        height: app.screen.height,\n        width: app.screen.width,\n        cooldown: 1000\n      })\n      setSlotMachine(slotMachine);\n      app.stage.addChild(slotMachine);\n      PIXI.Ticker.shared.start();\n    }\n  }, [isLoading])\n\n  const spin = () => {\n    if(slotMachine?.isSpinnable()){\n      setIsSpinning(true);\n      setBalance(balance - bet);\n      slotMachine?.spin();\n    }\n  }\n\n  \n\n  \n  return(\n      <>\n      <div className='game-container'>\n        <Card>\n          <Card.Header className='game-header'>\n            <div className='game-header-item'/>\n            <div className='game-header-item' style={{textAlign: \"center\"}}>\n              Slot Machine\n            </div>\n            <div className='game-header-item' style={{textAlign: \"right\"}}>\n              <Button onClick={handleShow} style={{background: \"#C0C0C0\"}} size={\"sm\"}>?</Button>\n            </div>\n          </Card.Header>\n          <div className='info-header'>\n            <span>Balance: {balance.toFixed(2)}</span>\n            <span>Bet: {bet}</span>\n            <span>Win: {win.toFixed(2)}</span>\n          </div>\n          <div ref={gameView} className='game-view'>\n          </div>\n\n          <Card.Footer>\n            <Button disabled={slotMachine === null || isSpinning || !slotMachine.isSpinnable} onClick={spin}>SPIN</Button>\n          </Card.Footer>\n        </Card>\n      </div>\n\n\n      <Modal show={showPayTable} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Pay Table</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <table>\n            <thead>\n              <tr>\n                <th>Hand</th>\n                <th>Multiplier</th>\n              </tr>\n            </thead>\n            <tbody>\n              {judge.payTable.map((p, i) => (\n                <tr key={i}>\n                  <td>{p.hand}</td>\n                  <td>{p.multiplier}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Modal.Body>\n        \n      </Modal>\n      </>\n  )\n}\n\nexport default Renderer;\n","import { Renderer } from './renderer/renderer';\nimport React from 'react';\n\n\nexport default class App extends React.Component {\n\n  render(): React.ReactNode {\n    return (\n      <>\n      <Renderer/>\n      </>\n    )\n  }\n}\n","\nimport React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './app';\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}